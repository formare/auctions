begin :::definitions related to second price auctions, and basic facts

definition let R; 
func topbiddersof R -> Subset of dom R equals R"{natmax rng R};
coherence by RELAT_1:132; :::R"Y is the preimage of Y under R
end;

definition let R; func winnerof R equals 
the Element of topbiddersof R; coherence;
end;
definition let R; func losersof R -> Subset of dom R equals 
dom R \ {winnerof R}; coherence; end;
definition let R; func priceof R equals natmax rng (R | losersof R); 
coherence;
end;
:::priceof R, above, gives the second value, when the bids is a
:::finite set of natural numbers; the modification below preserves  
:::its simplicity while  patching the value to zero for bogus cases  
:::(e.g., non-numerical bids), saving typing-related work. This 
:::works because, by Mizar convention, the type "Element of {}" is 
:::inhabited by {} alone; and, in turn, 0={}, set-theoretically.
definition let R;:::R=bids; no need to require it is a sequence,yet 
func priceof R -> Element of NAT equals 
the Element of {priceof R} /\ NAT; ::/\ rng (R|losersof R)
coherence by ORDINAL1:def 12;
end;

Lm16b: rng (R|losersof R) c= NAT & rng (R|losersof R) is finite 
implies priceof R = natmax rng (R|losersof R)
proof
set L=losersof R, Q=R|L, rQ=rng Q, P1=natmax rQ, P2=priceof R; 
assume rQ c= NAT & rQ is finite; then reconsider rQ as finite Subset of NAT;
rQ={} or rQ is right_end Subset of NAT; then 
P1=0 or (rQ<>{} & P1=sup rQ) by Lm12; then P1 is natural;
then {P1} \ NAT={}; then 
reconsider X={P1} as non empty Subset of NAT by FOMODEL0:29;
X/\NAT=X null NAT; then P2 = the Element of X .= P1 by TARSKI:def 1;
hence thesis;
end;

Lm8: (rng R<>{} & rng R c= NAT & rng R is finite) 
implies winnerof R in topbiddersof R

definition let R;
func R-pay ->Function equals [:dom R,{0}:]+*[:{winnerof R},{priceof R}:];
coherence; :::R-pay is how much each bidder must pay in the end
func R-allocations ->Function equals [:dom R,{0}:]+*[:{winnerof R},{1}:];
coherence; :::how much of the sold asset each bidder gets in the end
end;

registration 
let R; cluster R-allocations -> 2-valued for Function; 
coherence :::2-valued: we treat only the case of an indivisible asset
proof R-allocations is BOOLEAN-valued; hence thesis; end;
let x; cluster R-pay.x -> natural for number; 
coherence :::The case of integer currency is much simpler to formalize
end;:::fractional currency'd be overkill and not realistic 

begin :::the core theorems

Lm3: R-pay.(winnerof R) = priceof R

Lm0: natmax rng (P | (dom P \ dom Q)) c< natmax rng Q 
implies topbiddersof (P +*1 Q)=Q"{natmax rng Q} 
:::c< is strict set inclusion; thanks to von Neumann encoding 
:::(see above comments), this translates to <

Lm1: {union X}\X={} & natmax rng (P | (dom P\{x})) c< union X  
implies topbiddersof (P +*1 [:{x},X:])={x}

Lm5: R-pay.i c< union Y & rng (R|losersof R) c= NAT & 
rng (R|losersof R) is finite & i=winnerof R & {union Y}\Y={}
implies 
((R +*1 [:{i},Y:])-pay.i = R-pay.i & 
winnerof (R +*1 [:{i},Y:]) = winnerof R)

Lm4: rng R is finite Subset of NAT & 
Y is non empty Subset of NAT & union Y c= v 
implies 
(R +*1 [:{i},Y:])-pay.i <= (R +*1 [:{i},Y:])-allocations.i*v

Lm21: :::generalized Vickrey's theorem: 
::: multiple (distinct) bids per participant and zero-valued bids
for V being non empty finite Subset of NAT st  
rng R is finite Subset of NAT & union V = v holds
R-allocations.i*v - (R-pay.i) <= 
(R +*1 [:{i},V:])-allocations.i*v - (R +*1 [:{i},V:])-pay.i

::$EOF
