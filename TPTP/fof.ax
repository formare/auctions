%------------------------------------------------------------------------------
% File     : <For TPTP use only>
% Domain   : Set Theory
% Axioms   : Additional definitions for partitions 
% Version  : [ATT] axioms
% English  : 

% Refs     : [CKLR:SASI-EC15], Email to G. Sutcliffe
% Source   : [ATT]
% Names    : 

% Status   : Satisfiable
% Syntax   : <Don't worry about this one - we'll do it automatically>
% SPC      : <Don't worry about this one - we'll do it automatically>

% Comments : 
%------------------------------------------------------------------------------

include('Axioms/SET006+0.ax').
include('Axioms/SET006+1.ax').
include('Axioms/SET006+2.ax').

%--- The successor of a set for defining natural number as sets such as
%--- 0 is the empty set and n+1 := n u {n}.
fof(suc, axiom, (
	! [A] : (suc(A) = union(A, singleton(A)))
)).

fof(zero, axiom, (zero = empty_set)).

fof(one, axiom, (one = suc(zero))).

fof(two, axiom, (two = suc(one))).

%----- A family of sets X is non overlapping if its elements are pairwise disjoint.
%----- We define it as being the partition of some set U.
fof(non_overlapping, axiom, 
(! [X] : (non_overlapping(X) <=> (? [U] : partition(X,U))))
).

%----- Let a partition P (as a set of sets) be given which contains a set B.
%----- We grow one of its sets B by adding A to B, so that the new set of sets forms
%----- again a partition if A is fresh (i.e., is not contained in the original partion sets).
fof(insertIntoMember, axiom,
  (! [A, B, P] : insertIntoMember(A,B,P) = 
                 union(union(B,singleton(A)), difference(P,singleton(B)))
  )
).

%---- Ordered pair (standard Kuratowski definition) (note unordered_pair is a set of one or two elements)
fof(pair, axiom,
	(pair(A,B) = unordered_pair( unordered_pair(A,B), unordered_pair(A,A))) 
).

%---- Given a relation P, snd is a function yielding the second component for each pair in P
fof(snd, axiom, (
	! [P,Z] : ((member(Z,snd(P))) <=> (? [X,Y] : (
		(member(pair(X,Y),P)) & (Z=pair(pair(X,Y), Y)) 
	)))
)).

fof(domain, axiom,
	( ! [X,R] : 
		(member (X, domain(R)) <=> (? [Y] : member(pair(X,Y), R)) )
	)
).

fof(converse, axiom,
	( ! [X,Y,R] : 
		(member(pair(Y,X), converse(R)) <=> member(pair(X,Y), R))
	)
).

fof(range,axiom,
	(! [R] : (range(R) = domain(converse(R)))) 
).

fof(cartprod, axiom,
	( ! [A, B, Z] : ((member(Z,cartprod(A,B))) <=> ( ? [X,Y] : 
								((Z=pair(X,Y)) & (member(X,A)) & (member(Y,B)))
						      )
			)
						       
         )
).

fof(isrelation, axiom,
	( ! [R] : ( (isrelation(R)) <=> ( ? [X,Y] : (
	subset(R,cartprod(X,Y))
	)))
	)
).

%--- Composition of relations. Note that it reads starting from the left: relcomp (P, Q) first "applies" P, then Q.
%--- Functional composition adopts the opposite convention.
fof(relcomp, axiom, (
	! [P,Q,X] : ((member(X,relcomp(P,Q))) <=> 
		     (? [U,V,W] : (
			(member(pair(U,V),P)) & (member(pair(V,W),Q))				
	)))
)).

fof(allrelations, axiom,
	(! [A,B] : (allrelations(A,B) = power_set(cartprod(A,B))))
).

%--- image(R,A) is the set obtained by applying the relation R to the set A.
fof(image, axiom,
	(! [Y,R,A] : (  
			( member(Y, image(R,A))) <=> 
			( ? [X] : ((member(X,A)) & (member (pair(X,Y), R) )) ))
		     )
).

%--- relapply applies a relation F to a single argument A.
%--- (typically, a member of its domain; also typically, F will be
%--- runiq).  Note also that the image is applied to sets, hence we
%--- apply the image of F to the set {A} represented as
%--- singleton(A). From the resulting {result} we have to remove the
%--- braces in order to gain just result. This is done by sum, which
%--- stands for the big Union of a set of sets.
fof(relapply, axiom, (
	! [F, A] : (relapply(F,A) = sum (image(F, singleton(A))))
)).

fof(issingleton, axiom, (! [A] : 
			 ((issingleton(A)) <=> (? [X] : (A=singleton(X))))
			)
).

%--- A trivial set is either empty or singleton
%--- Note that prod stands for the big intersection of a set of sets.
%--- Note, for A = {}, singleton(prod(A)) = {{}} and for
%--- A = {a}, prod(A) = a and singleton(prod(A)) = {a} = A.
fof(istrivial, axiom,
	(! [A] : (
		(istrivial(A)) <=> (subset(A, singleton(prod(A))))
	))
).

%--- A relation is right-unique if each member of its domain has only one image (i.e., R is a function)
fof(isruniq, axiom, 
	(! [R] : ( (isruniq(R)) <=> (
		! [X,Y] : (istrivial(X) => (istrivial(image(R,X)))) 
	)))
).

fof(isfunction, axiom, (! [F]: (isfunction(F) <=> ((isrelation(F)) & (isruniq(F)))))).

fof(outside, axiom, 
	(! [R,A] : (
		outside(R,A) = difference(R, cartprod(A,range(R)))
	))
).

%--- relpaste combines two binary relations P and Q, where pairs from Q
%--- override pairs from P when their first components coincide.
%--- This is particularly useful when P, Q are runiq, and one wants to preserve that property.

fof(relpaste, axiom, (
	! [P,Q] : (relpaste(P,Q) = union(outside(P,domain(Q)),Q))
)).

%--- chi(A,B) is a function yielding 1 on A, and 0 on B\A.
fof(chi, axiom, (
	![A,B] : (chi(A,B) = relpaste(cartprod(B, singleton(zero)),cartprod(A, singleton(one))))
)).

fof(allinjections, axiom,
	(! [A, B, R] : (member (R,allinjections(A,B))) <=>
		( (domain(R) = A) &
		  (subset(range(R),B)) &
		  (isruniq(R)) &
		  (isruniq(converse(R))) &
		  (isrelation(R))
		)
	)
).

fof(allbijections, axiom, (
	(! [A, B, F] : (member(F,allbijections(A,B)) <=> ((member(F,allinjections(A,B)) & (range(F)=B)))))
)).

%--- N is the set of participants, G the set of goods
%--- A is an allocation iff there is a subset of winners W of N and a partition E of G such that
%--- A assigns to each winner a subset of goods in a pairwise disjoint and total manner. (All non-allocated goods
%--- are assigned to the seller, not further specified here).
fof(allallocations, axiom,
	( ! [N,G,A] :
		(
			(member(A,allallocations(N,G))) <=>
			(
				?[W, E] : (
						(
						subset(W,N) &
						partition(E,G) &
						member(A,allbijections(W,E))
						)
				) 
			)
		)
	)
).

%--- A is an allocation, N the set of participants, and G the set of goods. S is the seller.
%--- soldallocations(S,N,G) is the set of allocations allocating goods to N\{S}.
fof(soldallocations, axiom,
	(
	! [S,N,G,A] : ( member(A,soldallocations(S,N,G)) <=> (
        ? [B] : 
		((member(B, allallocations(N,G))) & (A = outside(B,singleton(S))))
	))
	)
).

%--- The following definitions are mainly about numbers.

%--- An inductive set is a superset of the set of natural numbers.
fof(isinductive, axiom, ( ! [A]: 
	(isinductive(A) <=> ((member(zero, A)) & (! [X]: ((member(X,A)) => (member(suc(X),A))) ))))
)	
).

%--- The natural numbers are the smallest inductive set.
fof(isnatnumber, axiom, ( ! [N]: 
	(isnatnumber(N) <=> (![X]: (isinductive(X) => (member(N,X)))))
)).

%--- omega is the set of naturals (you need infinity axiom for that; here, we just impose omega exists)
fof(omega, axiom, (
	! [N] : (member(N,omega) <=> isnatnumber(N))
)).

%--- This assumes that the cardinality exists, bypassing ordinal theory
fof(card, axiom, (
	! [F] :
	      (
	      	((member(N,omega)) & (? [G] : (member(G,allbijections(F,N))))) 
	      	=> (card(F) = N)
	      )	      
)).

%--- disjointer takes a family of sets and maps each of them to an equinumerous set.
%--- The fundamental difference is that the new family has the non-overlapping property (and allows compatibility of union and counting cardinalities).
%--- E.g., with A = {{0,1},{1}}, disjointer(A) = {{({0,1},0),({0,1},1)}, {({1},1)}}.
fof(disjointer, axiom, ( 
	! [A,X] : ((member(X,disjointer(A))) <=> ( ? [B] : ((member(B,A)) & ( X = cartprod(singleton(B),B))))) 
)).

%--- We use disjointer to define the sum of a set of finite sets (e.g., of natural numbers).
%--- E.g., with A = {{0,1},{1}}, setsum(A) = card(sum({{({0,1},0),({0,1},1)}, {({1},1)}})) = card({({0,1},0),({0,1},1), ({1},1)}) = 3.
%--- Note that if we took the card(sum(A)) we would get card(sum({{0,1},{1}})) = card({0,1}) = 2.
fof(setsum, axiom, (
	! [A] : (setsum(A) = card(
			     sum(disjointer(A))
	))
)).

%--- fsetsum(F,A) returns the sum of F over the set A. 
%--- Note that disjointer is used to handle the case of f being non-injective.
fof(fsetsum, axiom, (
	! [F, A] : (fsetsum(F,A) = setsum(disjointer(image(F,A))))
)).


%--- In set theory, where a function implicitly specifies its domain, we can talk about the argmax of a function (without specifying a second argument)
%--- without losing generality.
%--- Note that sum stands for big union, which for a set of natural numbers corresponds to its maximum.
fof(argmaxaux, axiom, (
	! [F,X] : (
		(member(X,argmaxaux(F)) <=> ((member(X,domain(F))) & (relapply(F,X)=sum(range(F)))))
		)
)).

%--- Restriction of a relation R to a set A.
fof(restrict, axiom, (
	! [R, A] : (restrict(R,A) = outside(R,difference(domain(R),A)))
)).

%--- We use the one-argument argmaxaux to define the standard argmax 
fof(argmax, axiom, (
	! [F,A] : (argmax(F,A) = argmaxaux(restrict(F,A)))
)).

%------ END of Axioms


fof(allAllocationsInPowerset, conjecture,
	(
		subset(allallocations(N,G),
			power_set(cartprod(N, difference(power_set(G), singleton(empty_set))))
		)
	)
).

fof(soldAllocationRestriction, conjecture,
	( ! [N,G,A,X,S] : (
	(member(A, soldallocations(N,G))) => (member(outside(A,singleton(X)), 
	soldallocations(S,difference(N, singleton(X)), G)
	)) 
	))
).

fof(pairDifference, conjecture, ( ! [A, B, C]: (
	difference(singleton( pair(A,B) ), singleton( pair(A,C) )) = cartprod(singleton(A), difference(singleton(B), singleton(C)))
	))
).

fof(soldAllocationsFinite, conjecture, (! [S, N, G] : ( 
	((isfinite(N)) & (isfinite(G))) => (isfinite(soldallocations(S,N,G)))	
))).

%--- Here, sum means max, member means <, and member(X,suc(Y)) means X<=Y.
fof(maxLemma, conjecture, ( ! [A, B, F]: (
	((member(A,B)) & (isfinite(B)) & (isfunction(F)) & (subset(range(F),omega)) & (subset(B,domain(F)))) => (member(relapply(F,A),suc(sum(image(F,B)))))
))).

fof(setsumPairsInverse, conjecture, (
	! [F, P] : (
	( (isfunction(F)) & (isrelation(P)) & (isruniq(converse(P))) & (isfinite(P)) & (subset(range(F),omega)) & 
	(subset(range(P), domain(F)))) =>
	(fsetsum(relcomp(snd(P), F), P) = fsetsum(F, range(P)))
	)
)).

fof(lm142, conjecture, (
	! [A] : ((istrivial(A)) => (member( card(power_set(A)), unordered_pair(one, two) )))
)).

%--- lm112 links the concept of cardinality to the sum over a set: it is somehow a bridge between
%--- set theory and economics (where we use fsetsum to calculate revenues)
fof(lm112, conjecture, (
	! [X,Y,Z] : ( 
  ((subset(Z,union(X,Y))) & (isfinite(Z))) => 
  (fsetsum(chi(X,Y), Z) = card (intersection(Z,X)))
  )
)).

%--- Given an allocation A, all the goods allocated to the participants of a set X are reassigned to a participant I not in X.
%--- We show that the outcome is still an allocation (relative to the original set of participants with X removed).

fof(lm053, conjecture, (
	![A,N,G,I,X] : (
		(
		 (member(A,allallocations(N,G))) & 
		 (member(I, difference(N,X))) &
		 (~(intersection(domain(A), X) = empty_set))
		)
		=> 
		(       
			member(
			union(outside(A ,union(X, singleton(I))), 
			      cartprod(singleton(I), singleton(sum(image(A, union(X,singleton(I))))))), 
			allallocations (difference(N,X), sum(range(A))))
		)
        )
)).

%--- argmax F is the counterimage, through F, of {max(range(F))}. max is set-theoretically rendered via sum
%--- model more closely to lm01 in Argmax.thy
fof(lm01, conjecture, (
	((isfunction(F)) & (finite(F)) & (subset(range(F),omega))) => 
	(argmaxaux(F) = image(converse(F),singleton(sum(range(F)))))
)).

%---
fof(argmaxEquivalence, conjecture, (
( ! [F,G,A] :
	(
	( 	(isfunction(F)) & (isfunction(G)) & (subset(A,intersection(domain(F),domain(G)))) & 
		(subset(union(range(F),range(G)),omega)) &
		(finite(A)) &
		( ! [X] : ((member(X,A)) => (relapply(F,X)=relapply(G,X))))
	) 
	=> 
	(argmax(F,A) = argmax(G,A))
	)
)
)).

